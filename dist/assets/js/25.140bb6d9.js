(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{320:function(e,t,a){},338:function(e,t,a){"use strict";a(320)},359:function(e,t,a){"use strict";a.r(t);a(338);var r=a(25),n=Object(r.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"blog"}},[e._v("Blog")]),e._v(" "),t("p",[t("strong",[e._v("I will share all my bug hunting findings here, this blog will be updated gradually. Enjoy reading!")])]),e._v(" "),t("ProjectCard",[t("p",[t("strong",[e._v("Polygon zkEVM Series 4: Under-Constrained Sparse Merkle Tree")])]),e._v(" "),t("p",[e._v("To be writting...")])]),e._v(" "),t("ProjectCard",[t("p",[t("strong",[e._v("Polygon zkEVM Series 3: ROM-Induced Unprovable Transactions")])]),e._v(" "),t("p",[e._v("To be writting...")])]),e._v(" "),t("ProjectCard",[t("p",[t("strong",[e._v("Polygon zkEVM Series 2: Executor-Induced Unprovable Transactions")])]),e._v(" "),t("p",[t("span",{staticStyle:{color:"green"}},[e._v("Label:")]),e._v(" "),t("span",{staticStyle:{color:"red"}},[e._v("ZK-Related Bug, Critical Impact, Complex Bug")])]),e._v(" "),t("p",[e._v("The executor-induced unprovable transaction vulnerability in zk systems occurs when the state transition produced by the executor (witness calculator) fails to satisfy the constraint system. This is usually caused by a computational error in the executor.")]),e._v(" "),t("p",[e._v("["),t("a",{attrs:{href:"./4"}},[e._v("Click here to see details")]),e._v("]")])]),e._v(" "),t("ProjectCard",[t("p",[t("strong",[e._v("Polygon zkEVM Series 1: Dual Execution Paths")])]),e._v(" "),t("p",[t("span",{staticStyle:{color:"green"}},[e._v("Label:")]),e._v(" "),t("span",{staticStyle:{color:"red"}},[e._v("ZK-Related Bug, Complex Bug")])]),e._v(" "),t("p",[e._v("A dual execution path vulnerability is fundamentally a soundness vulnerability. In the context of a zkEVM written in zkasm, such a vulnerability arises when multiple execution paths can lead to the same final state but consume different zk-related resources (e.g., STEP counters). This blog discuss 3 dual execution path vulnerabilities.")]),e._v(" "),t("p",[e._v("["),t("a",{attrs:{href:"./3"}},[e._v("Click here to see details")]),e._v("]")])]),e._v(" "),t("ProjectCard",[t("p",[t("strong",[e._v("Misconfiguration of Ethereum RPC Series 2: Unlimited Batch Requests")])]),e._v(" "),t("p",[t("span",{staticStyle:{color:"green"}},[e._v("Label:")]),e._v(" "),t("span",{staticStyle:{color:"red"}},[e._v("Multiple Venders Affected")])]),e._v(" "),t("p",[e._v("Ethereum-based L2 implementations lack limits on batch request size or number, making nodes vulnerable to memory exhaustion and crashes. Several leading projects, such as Polygon zkEVM and Scroll, are affected by this vulnerability.")]),e._v(" "),t("p",[e._v("["),t("a",{attrs:{href:"./2"}},[e._v("Click here to see details")]),e._v("]")])]),e._v(" "),t("ProjectCard",[t("p",[t("strong",[e._v("Misconfiguration of Ethereum RPC Series 1: RPC Debug Mode Enabled")])]),e._v(" "),t("p",[t("span",{staticStyle:{color:"green"}},[e._v("Label:")]),e._v(" "),t("span",{staticStyle:{color:"red"}},[e._v("Multiple Venders Affected")])]),e._v(" "),t("p",[e._v("Ethereum nodes with RPC debug mode enabled in production are vulnerable to attacks, leading to node crashes and data corruption. Several leading projects, such as Arbitrum and Boba network, are affected by this vulnerability.")]),e._v(" "),t("p",[e._v("["),t("a",{attrs:{href:"./1"}},[e._v("Click here to see details")]),e._v("]")])]),e._v(" "),t("ProjectCard",[t("p",[t("strong",[e._v("Double-Spending Vulnerabilities on Arbitrum")])]),e._v(" "),t("p",[t("span",{staticStyle:{color:"green"}},[e._v("Label:")]),e._v(" "),t("span",{staticStyle:{color:"red"}},[e._v("Critical Impact, Complex Bug")])]),e._v(" "),t("p",[e._v("In 2022, I started to study the Arbitrum codebase and found several critical double-spending vulnerabilities. These double-spending vulnerabilities could cause billions of dollars in direct losses to third-party cross-chain bridges and centralized exchanges. Arbiturm fixed these vulnerabilities in a timely manner and gave me huge bug bounties.")]),e._v(" "),t("p",[e._v("["),t("a",{attrs:{href:"../files/DoubleUp_Roll__Final_Version_.pdf"}},[e._v("Research Paper PDF")]),e._v("]")])]),e._v(" "),t("ProjectCard",[t("p",[t("strong",[e._v("Security Analysis of Algorand Smart Contracts")])]),e._v(" "),t("p",[e._v("While reviewing the Algorand ecosystem, I identified several generic vulnerabilities within Algorand smart contracts, stemming from incorrect programming practices. I developed a static analysis tool to automatically find these bugs, and conducted a comprehensive vulnerability scan of Algorandâ€™s blockchain. Many projects, including key blockchain platforms like decentralized exchanges and NFT auction systems, have acknowledged the vulnerabilities found by my tool. I also received bug bounties from some projects.")]),e._v(" "),t("p",[e._v("["),t("a",{attrs:{href:"../files/Panda__Security_Analysis_of_Algorand_Smart_Contracts.pdf"}},[e._v("Research Paper PDF")]),e._v("]")])])],1)}),[],!1,null,null,null);t.default=n.exports}}]);